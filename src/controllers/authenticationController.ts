/**
 * MultiAuth-SampleLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { ServiceStatus, serviceStatusSchema } from '../models/serviceStatus';
import { User, userSchema } from '../models/user';
import { BaseController } from './baseController';

export class AuthenticationController extends BaseController {
  /**
   * @return Response from the API call
   */
  async oAuthBearerToken(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET', '/auth/oauth2');
    req.authenticate([{ oAuthBearerToken: true }]);
    return req.callAsText(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async customAuthentication(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET', '/auth/customAuthentication');
    req.authenticate([{ customAuth: true }]);
    return req.callAsText(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async customQueryOrHeaderAuthentication(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET', '/auth/customQueryOrHeaderParam');
    req.authenticate([{ apiKey: true }, { apiHeader: true }]);
    return req.callAsText(requestOptions);
  }

  /**
   * This endpoint tests or combinations of OAuth types
   *
   * @return Response from the API call
   */
  async oAuthGrantTypesORCombinations(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET', '/oauth2/oauthOrCombination');
    req.authenticate([{ oAuthCCG: true }, { oAuthBearerToken: true }]);
    return req.callAsText(requestOptions);
  }

  /**
   * This endpoint does not use auth.
   *
   * @return Response from the API call
   * @deprecated
   */
  async noAuth(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET', '/auth/noAuth');
    req.query('array', 'true');
    req.deprecated('AuthenticationController.noAuth' ,'   You should not use this method as it requires no auth and can bring security issues to the server and api call itself!!');
    req.authenticate(false);
    return req.callAsText(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async oAuthClientCredentialsGrant(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServiceStatus>> {
    const req = this.createRequest('GET', '/oauth2/non-auth-server/status');
    req.authenticate([{ oAuthCCG: true }]);
    return req.callAsJson(serviceStatusSchema, requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async basicAuthAndApiHeaderAuth(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET', '/auth/basicAndApiKeyAndApiHeader');
    req.authenticate([{ basicAuth: true, apiKey: true, apiHeader: true }]);
    return req.callAsText(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async oAuthAuthorizationGrant(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<User>> {
    const req = this.createRequest('GET', '/oauth2/non-auth-server/user');
    req.authenticate([{ oAuthACG: true, oAuthROPCG: true }]);
    return req.callAsJson(userSchema, requestOptions);
  }

  /**
   * This endpoint uses globally applied auth which is a hypothetical scneraio but covers the worst case.
   *
   * @return Response from the API call
   * @deprecated
   */
  async multipleAuthCombination(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<string>> {
    const req = this.createRequest('GET', '/auth/multipleAuthCombination');
    req.deprecated('AuthenticationController.multipleAuthCombination');
    req.authenticate([{ customAuth: true }, { oAuthBearerToken: true }, { basicAuth: true, apiKey: true, apiHeader: true }]);
    return req.callAsText(requestOptions);
  }
}
